*orca.text* Docker wrapper for vim.

                    ##        .           ~
              ## ## ##       ==           ~
           ## ## ## ##      ===           ~
       /""""""""""""""""\___/ ===         ~
  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~  ~
       \     #o#          __/             ~
         \#####    ### __/                ~
          \#####___#__/                   ~

          __   _  __  __                  ~
         /  \ |  /   /  \                 ~
         \__/ |  \__ \__/|                ~

====================================================================
CONTENTS                                              *OrcaContents*

    1. Usage ................ |OrcaUsage|
    2. Docker Commands ...... |OrcaDocker|
    3. Fig Commands ......... |OrcaFig|
    4. Configuration ........ |OrcaConfiguration|
    5. Bugs ................. |OrcaBugs|
    6. Contributing ......... |OrcaContributing|
    7. Changelog ............ |OrcaChangelog|
    8. Credits .............. |OrcaCredits|

====================================================================
Section 1: Introduction                                  *OrcaUsage*

If you've ever used tpope's vim plugin `fugitive`, then you'll understand how
useful such wrapper's can be. They speed up workflow and can provide more
intuitive interface than a bog standard CLI.
While `git` and `docker` and very different technologies, a number of paralells
can be drawn between them. The most important of these from my perspective is
that they both require very long commands to accomplish what should be fairly
standard tasks (okay, `git` commands aren't THAT long...). This was my initial
incentive to develop a vim plugin that wraps `docker`.

====================================================================
Section 2: Docker Commands                              *OrcaDocker*


                                                      *orca-:Docker*
:Docker [args]      Run arbitrary docker command. Similar to :!docker [args]

                                                      *orca-:Dbuild*
:Dbuild <image> [context]
                    Build an image using the Dockerfile in the current dir.
                    The resulting image will be called [image].

                                                       *orca-:Dexec*
:Dexec [args]       For arbitrary `docker exec` commands.

                                                       *orca-:Dpull*
:Dpull [image]      Pull [image] down from the registery.
                    See |g:orca_private_registery| to use private registeries.

                                                     *orca-:Dcreate*
:Dcreate [details]  DEPRECATED. This function will be wildly different in
                    future versions of orca.
                    Create a container from an image.

                                                     *orca-:Dcommit*
:Dcommit [container] [image]
                    Commit the contents of container to a new image.
                    If [container] is unspecified, the latest_container will
                    be used by default.

                                                       *orca-:Dkill*
:Dkill [container]  Forcibly stop container.

                                                        *orca-:Drmi*
:Drmi [image]       Delete image and any containers using it.

                                                         *orca-:Drm*
:Drm [image]        Delete a container.

                                                        *orca-:Drun*
:Drun [args]        Run an arbitrary `docker run` command.

                                                    *orca-:Dhistory*
:Dhistory [image]   See how [image] was built.

                                                    *orca-:Dinspect*
:Dinspect [object]  Low-level information on a container or image.
                    Results will be displayed in a preview for convienient
                    searching.

                                                       *orca-:Dlogs*
:Dlogs [container]  Retrieve the logs from a specific [container].
                    If [container] is unspecified, the latest_container will
                    be used by default.
                    Results will be displayed in a preview for convienient
                    searching.

                                                     *orca-:Dimages*
:Dimages            List images that are available locally in preview window.
                    Press `?` to see a list of available keymaps.

====================================================================
Section 3: Fig Commands                                    *OrcaFig*

                                                         *orca-:Fig*
:Fig [args]         Run arbitrary fig command. Similar to :!fig [args]

                                                      *orca-:Fbuild*
:Fbuild [service]   This just runs `fig build`. You have the option of
                    specifying the [service], otherwise it will build them all.

                                                      *orca-:Fup*
:Fup                This just runs `fig up -d`.

====================================================================
Section 4: Other Commands                                *OrcaOther*

                                                      *orca-:Dshell*
:Dshell [image]     Drop into a shell on a container created from [image].

                                                     *orca-:Dstatus*
:Dstatus [status]   List containers where status=[status] in preview window.
                    [status], if provided, must match the following regex:
                    "all|restarting|running|paused|exited".
                    Press `?` to see a list of available keymaps.

                                                      *orca-:Dwrite*
:Dpatch [container] Patch the current dir with changes from the container.
                    Changes are found by running `docker exec ... git diff`.

====================================================================
Section 4: Configuration                         *OrcaConfiguration*

Coming soon!

====================================================================
Section 5: Bugs                                           *OrcaBugs*

* Preview windows can capture a 'Sorry, try again' message if you get the sudo
  password wrong.
* `:Dlogs` can suck in other bash commands if the logs end with a `!`

====================================================================
Section 6: Contributing                           *OrcaContributing*

Whether it's a feature you want, a bugfix you've developed or a typo that's
irritating you and you feel the urge to help, feel free to fork
github.com/nicr9/vim-orca and submit a pull request.

I've been using this project as an excuse to learn vimscript so please don't be
shy, your input is valuble not just in moving the project forward but also as
an excuse to get a deeper insight into the wonderful world of vim!

I look forward to hearing from you!

====================================================================
Section 7: Changelog                                 *OrcaChangelog*

Coming soon!

====================================================================
Section 8: Credits                                     *OrcaCredits*

My original inspiration for the project was tpope's fugitive plugin:
    github.com/tpope/vim-fugitive

I learned most of what I know about vimscript from the wonderful e-book
`learn vimscript the hard way`:
    learnvimscriptthehardway.stevelosh.com

The orca logo on this page was modeled after dhrp's docker logo:
    gist.github.com/dhrp/5733652

Finally, if you want to contact me and tell me what a horible/wonderful idea
this was, feel free to drop me a line:
    Nic Roland
    nicroland9@gmail.com
    @nicr9_
