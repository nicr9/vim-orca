*orca.text* Docker wrapper for vim.

                    ##        .           ~
              ## ## ##       ==           ~
           ## ## ## ##      ===           ~
       /""""""""""""""""\___/ ===         ~
  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~  ~
       \     #o#          __/             ~
         \#####    ### __/                ~
          \#####___#__/                   ~

          __   _  __  __                  ~
         /  \ |  /   /  \                 ~
         \__/ |  \__ \__/|                ~

====================================================================
CONTENTS                                              *OrcaContents*

    1. Usage ................. |OrcaUsage|
    2. Docker Commands ....... |OrcaDocker|
    3. Docker Compose Commands |OrcaDCompose|
    4. Configuration ......... |OrcaConfiguration|
    5. Bugs .................. |OrcaBugs|
    6. Contributing .......... |OrcaContributing|
    7. Changelog ............. |OrcaChangelog|
    8. Credits ............... |OrcaCredits|

====================================================================
Section 1: Introduction                                  *OrcaUsage*

If you've ever used tpope's vim plugin `fugitive`, then you'll understand how
useful such wrapper's can be. They speed up workflow and can provide more
intuitive interface than a bog standard CLI.
While `git` and `docker` and very different technologies, a number of paralells
can be drawn between them. The most important of these from my perspective is
that they both require very long commands to accomplish what should be fairly
standard tasks (okay, `git` commands aren't THAT long...). This was my initial
incentive to develop a vim plugin that wraps `docker`.

====================================================================
Section 2: Docker Commands                              *OrcaDocker*


                                                      *orca-:Docker*
:Docker [args]      Run arbitrary docker command. Similar to :!docker [args]

                                                      *orca-:Dbuild*
:Dbuild <image> [context]
                    Build an image using the Dockerfile in the current dir.
                    The resulting image will be called [image].

                                                       *orca-:Dexec*
:Dexec [args]       For arbitrary `docker exec` commands.

                                                       *orca-:Dpull*
:Dpull [image]      Pull [image] down from the registery.
                    See |g:orca_private_registery| to use private registeries.

                                                     *orca-:Dcreate*
:Dcreate <image> [name]
                    Create a container from an image. The name of the container
                    will be displayed after it is created.

                                                     *orca-:Dcommit*
:Dcommit [container] [image]
                    Commit the contents of container to a new image.
                    If [container] is unspecified, the latest_container will
                    be used by default.

                                                       *orca-:Dkill*
:Dkill [container]  Forcibly stop container.
                    If [container] is unspecified, the latest_container will
                    be used by default.

                                                        *orca-:Drmi*
:Drmi [image]       Delete image and any containers using it.

                                                         *orca-:Drm*
:Drm [container]    Delete a container.
                    If [container] is unspecified, the latest_container will
                    be used by default.

                                                        *orca-:Drun*
:Drun [args]        Run an arbitrary `docker run` command.

                                                    *orca-:Dhistory*
:Dhistory [image]   See how [image] was built.

                                                    *orca-:Dinspect*
:Dinspect [object]  Low-level information on a container or image.
                    If [container] is unspecified, the latest_container will
                    be used by default.
                    Results will be displayed in a preview for convienient
                    searching.

                                                       *orca-:Dlogs*
:Dlogs [container]  Retrieve the logs from a specific [container].
                    If [container] is unspecified, the latest_container will
                    be used by default.
                    Results will be displayed in a preview for convienient
                    searching.

                                                     *orca-:Dimages*
:Dimages            List images that are available locally in preview window.
                    Press `?` to see a list of available keymaps.

====================================================================
Section 3: Docker Compose Commands                    *OrcaDCompose*

                                                    *orca-:DCompose*
:DCompose [args]    Run arbitrary docker-compose command. Similar to running:
                    :!docker-compose [args]
                    https://docs.docker.com/compose/

                                                     *orca-:DCbuild*
:DCbuild [service]  This just runs `docker-compose build`. You have the option
                    of specifying which specific [service] to build, otherwise
                    it will build them all.
                    https://docs.docker.com/compose/reference/build/

                                                      *orca-:DCkill*
:DCkill [service]   Equivilent of `docker-compose kill`. You have the option
                    of specifying which specific [service] to kill, otherwise
                    it will kill them all.
                    https://docs.docker.com/compose/reference/kill/

                                                        *orca-:DCps*
:DCps [status]      List running contains of active services in a
                    preview window.
                    https://docs.docker.com/compose/reference/ps/

                                                   *orca-:DCrestart*
:DCrestart [service] Equivilent of `docker-compose restart`. You have the option
                    of specifying which specific [service] to restart, otherwise
                    it will restart them all.
                    https://docs.docker.com/compose/reference/restart/

                                                        *orca-:DCrun*
:DCrun [service] [args] Start a [service] container, optionally pass [args] to
                    it's entrypoint process.
                    https://docs.docker.com/compose/reference/run/

                                                     *orca-:DCstart*
:DCstart [service]  Equivilent of `docker-compose start`. You have the option
                    of specifying which specific [service] to start, otherwise
                    it will start them all.
                    https://docs.docker.com/compose/reference/start/

                                                        *orca-:DCup*
:DCup [service]     This just runs `docker-compose up -d`. You have the option
                    of specifying which specific [service] to boot, otherwise
                    it will boot up all of them.
                    https://docs.docker.com/compose/reference/up/

                                                      *orca-:DClogs*
:DClogs [service]   This just runs `docker-compose logs`. You have the option
                    of specifying which specific [service]'s logs to look at,
                    otherwise it will multiplex all of them.
                    https://docs.docker.com/compose/reference/logs/

                                                      *orca-:DCpull*
:DCpull [service]   This just runs `docker-compose pull`. You have the option
                    of specifying which specific [service]'s image to pull,
                    otherwise it will pull all of them.
                    https://docs.docker.com/compose/reference/pull/

                                                        *orca-:DCrm*
:DCrm [service]     This just runs `docker-compose rm`. You have the option
                    of specifying which specific [service]'s containers to
                    delete, otherwise it will delete all of them.
                    https://docs.docker.com/compose/reference/rm/

                                                      *orca-:DCscale*
:DCscale [service=num ...]
                    For setting the number of containers to run for a service.
                    Each argument should be the name of the service and the
                    number of containers required, separated by an `=`.
                    Any args not matching this pattern will be skipped.
                    https://docs.docker.com/compose/reference/scale/

                                                      *orca-:DCstop*
:DCstop [service]   This just runs `docker-compose stop`. You have the option
                    of specifying which specific [service]'s containers to
                    stop, otherwise it will stop all of them.
                    https://docs.docker.com/compose/reference/stop/

====================================================================
Section 4: Other Commands                                *OrcaOther*

                                                     *orca-:Dstatus*
:Dstatus [status]   List running containers in a preview window.
                    This list can be filtered with [status] which must match:
                    "all|restarting|running|paused|exited".
                    [status] can be of the form "key=value" (see docker docs
                    for more info).
                    Anytime [status] is used, the '-a' flag will be included.
                    Press `?` to see a list of available keymaps.

                                                      *orca-:Dwrite*
:Dpatch [container] Patch the current dir with changes from the container.
                    Changes are found by running `docker exec ... git diff`.

====================================================================
Section 4: Configuration                         *OrcaConfiguration*

                                                 *orca-g:orca_debug*
g:orca_debug	    Default: 0
                    If set to 1, commands will not be sent to a docker-engine
                    instance. Either the bash command will be echoed or the
                    results in the preview window will be simulated.

                                               *orca-g:orca_verbose*
g:orca_debug	    Default: 0
                    If set to 1, `--verbose` will be passed to the docker client
                    for all commands executed.

                                                  *orca-g:orca_sudo*
g:orca_sudo 	    Default: 0
                    If set to 1, docker commands will be executed with sudo.

                                     *orca-g:orca_private_registery*
g:orca_private_registery
                    Default: ""
                    If set, the value will be prepended to docker pull and push
                    commands.

                                           *orca-g:orca_preview_dir*
g:orca_preview_dir  Default: "/tmp/orca/"
                    All commands that list results in a preview window cache
                    the contents of the window in files saved in this directory.
                    This directory will be created if it doesn't exist.

====================================================================
Section 5: Bugs                                           *OrcaBugs*

* Preview windows can capture a 'Sorry, try again' message if you get the sudo
  password wrong.
* `:Dlogs` can suck in other bash commands if the logs end with a `!`
* `s:Dstatus` filtering doesn't work with "restarting|running|paused|exited"

====================================================================
Section 6: Contributing                           *OrcaContributing*

Whether it's a feature you want, a bugfix you've developed or a typo that's
irritating you and you feel the urge to help, feel free to fork
github.com/nicr9/vim-orca and submit a pull request.

I've been using this project as an excuse to learn vimscript so please don't be
shy, your input is valuble not just in moving the project forward but also as
an excuse to get a deeper insight into the wonderful world of vim!

I look forward to hearing from you!

====================================================================
Section 7: Changelog                                 *OrcaChangelog*

v0.4
----

* `g:orca_default_repo` renamed to `g:orca_private_registery`
* `:Dhistory` now uses `--no-trunc=true` by default.
* Commands that expect a container id now default to the last run container.
* `:Dimages` preview keymap changes.
* `:Dkill`, `:Drm` and `:Drmi` all now accept lists of container ids.
* Vim swap files are disabled for previews now.
* Refactored fig related code to reflect fig's change to docker-compose.

====================================================================
Section 8: Credits                                     *OrcaCredits*

My original inspiration for the project was tpope's fugitive plugin:
    github.com/tpope/vim-fugitive

I learned most of what I know about vimscript from the wonderful e-book
`learn vimscript the hard way`:
    learnvimscriptthehardway.stevelosh.com

The orca logo on this page was modeled after dhrp's docker logo:
    gist.github.com/dhrp/5733652

Finally, if you want to contact me and tell me what a horible/wonderful idea
this was, feel free to drop me a line:
    Nic Roland
    nicroland9@gmail.com
    @nicr9_
